********** Определения *****************
Такт - изменение состояния персонажей, 20-25 кадров анимации

********** Список функций **************

1. Игровой процесс
2. Сохранение/загрузка текущего статуса игры


*********** Игровой экран *************
Направление осей:
  |
--0----->
  |      X
  |
  v  Y

--------------------------------------------------------------------------------------------
| здоровье | мана | Зомби: 4 | Инопланетяне: 9 |  Сохранить F9  | Загрузить F10 | Пауза P  |
--------------------------------------------------------------------------------------------
|                                                                                          |
|                                                                                          |
|                                                                                          |
|                                                                                          |
|                                                                                          |
|                                                                                          |
|                                                                                          |
|                                                                                          |
|                                                                                          |
|                                                                                          |
|                                                                                          |
|                                                                                          |
|                                                                                          |
|                                                                                          |
|                                                                                          |
|------------------------------------------------------------------------------------------|
|                      |  -------------   ------------                                     |
|   миникарта          |  | кастануть |   | лечиться |                                     |
|                      |  -------------   ------------                                     |
|                      |                                                                   |
--------------------------------------------------------------------------------------------


************** Стартовый экран ***************

--------------------------------------------------------------------------------------------
|                                                           EPAM Hackathon 2012            |
--------------------------------------------------------------------------------------------
|                                                                                          |
|                                                                                          |
|                                                                                          |
|                                                                                          |
|                                                                                          |
|                          -------------------------------                                 |
|                          |          Начать             |                                 |
|                          -------------------------------                                 |
|                          |          Загрузить          |                                 |
|                          -------------------------------                                 |
|                          |          Правила            |                                 |
|                          -------------------------------                                 |
|                                                                                          |
|                                                                                          |
|                                                                                          |
|                                                                                          |
|                                                                                          |
|                                                                                          |
|                                                                                          |
|                                                                                          |
|                                                                                          |
|                                                                                          |
--------------------------------------------------------------------------------------------


**************** Отрисовка *******************

Размер видимого игрового поля фиксированный: 20х15 (требуется подобрать)
Размер ячейки: 50х50
Игрок всегда находится в центре экрана, если требуется отобразить "отсутствие карты", то отображать черным.
На игровом экране 2 canvas-а: игровое поле и миникарта, остальное все HTML элементы.


************** Сохранение/загрузка ***********

Используется storage браузера
Используется текущее состояние мира.
Доступно только одно сохранение.


************ Игровой процесс ****************

1. При старте игры выбирается случайный сценарий, на которой размещены определенным образом игрок и инопланетяне.
2. При загрузке игры сценарий восстанавливается из storage браузера
3. Взаимодействие персонажей согласно диздоку.

************* Feature wish list *****************
1. Выбор сценария (преднастроенной карты)
2. Случайный сценарий
3. Бонусы на карте меняющие игрока(лечилка, мана, увеличение скорости и т.д.)
3. Бонусы на карте меняющие других на карте (замедление других, побить часть зомби и т.д.)


**************** Архитектура *******************
++++++++++++++++ Классы и методы +++++++++++++++

World = { //игровой мир, синглтон, описывает состояние всех объектов в мире.
	enemies : Enemy[], // все инопланетяне
	zombies : Zombie[], // все зомби мира
   animation: Animation[], //    фиктивные персонажи-анимации
	necromancer : Necromancer, // игрок
	map: String[],  // игровая карта: 0 - пустое место, X - препятствие
					// 00000000000000000000000000
					// 0XXXXXXXXXXX00000000000000
					// 0X00000000000XXXXXXX000000
					// 0XXXXXXXXXX000000X00000000
					// 00000000000000000X00000000
					// 00XXXXXXXX0000000X00000000
					// 00000X00000000000X00000000
					// 00000X00000000000X00000000
					// 00000X00000000000X00000000
					// 00000000000000000000000000
					// 00000000000000000000000000
					// 00000000000000000000000000
	recalculateState() // метод перерасчета состояний персонажей
}

Unit = { // базовый класс для всех персонажей
	id : int, // идентификатор персонажа
	x,y : int, // позиция на карте (координаты ячейки)
	timePerMove : int // время персонажа на смену ячейки
	direction: <"up", "down", "left", "right">, // направление взгляда персонажа : вверх, вних, влево, вправо соответственно.
    isDead:boolean; //   мертв ли персонаж
	rotate(direction) // повернуть персонаж вверх, вних, влево, вправо соответственно.	
	move(), // передвинуть персонаж 
   isLocked: boolean, // персонаж на обсчитывании, необходимо дождаться разблокировки
	// состояние персонажей и методы, необходимые для отрисовки
	nx, nx : int, // куда перемещается персонаж	
	cx, cy: float, // координаты персонажа для отрисовки
    frameCounter: int // количество отрисованных кадров анимации
    getAnimation():String // имя файла с анимацией
    getAnimationFramesCount(): int //   количество кадров для анимации
	 saveCurrentState() // сохранить текущее состояние x = nx, y = ny, обнулить счетчики и т.д.
}

Animation: Unit { // персонаж-анимация
     animationStartTime: DateTime // время старта анимации, используется для контроля когда нужно убить персонажа.
}

Enemy : Unit = { // инопланетянин	
}

Zombie : Unit = { // зомби
	health : int // здоровье
}

Necromancer : Unit = { // игрок
	health: int,  //здоровье игрока, если <=0, то игрок мертв
	mana: int, // мана игрока
	hurtAmount: int // сила ранения игрока в данном такте, если 0, то ранения нет, необходимо запустить анимацию
}

Scenario = { // Описание сценария игры, отсюда загружается первоначальное состояние игрового мира
	title: String, // название карты
	Description: String, // описание карты
	map : String[], // карта
	enemiesX : int[], enemiesY : int[], // позиции инопланетян
	necromancerX : int[], necromancerY : int[] // позиция игрока
}

++++++++++++++++++++++ Алгоритм работы игрового мира ++++++++++++++++++++++++++++++

Поток ИИ (для каждого персонажа свой таймер)
1. Запуск ИИ для персонажа
2. Изменение состояния персонажа
3. Ставим таймер для 4 в зависимости от персонажа.
4. Пересчет игрового мира для конкретного персонажа.
5. Пункт 1

Поток клавиатуры
1. Считывание данных из буффера клавиатуры игрока, 
2. Обработка и изменение состояния
3. Таймер для 4 на значение анимации игрока
4. Пересчет игрового мира для конкретного персонажа.
5. Пункт 1

Возможные состояния персонажа
1. Персонаж ничего не сделал.
2. Персонаж переместился (необходимо сделать x=nx,y=ny), далее варианты:
    а. на пустую клетку - более ничего не делаем
    б. на клетку с персонажем - расчитать взаимодействие, в результате создать анимационного персонажа или другое.
3. Персонаж повернулся (может быть частью любого действия)
4. Персонаж кастанул. Для отображения анимации создаем персонажа-анимацию со значениями nx = x+3 (значение прибавления определяется автоматически, но не более определенного значения, х - текущее положение персонажа).
Кроме запуска через поток ИИ есть контролирующий таймер WatchDog. Он срабатывает, если ни один поток не вызывал расчет. Контролируется при помощи флага.


Поток отрисовки:
Данные берутся из объекта игрового мира
1. Отрисовка слоя карты, если необходимо
2. Отрисовка персонажей в цикле:
   а. инопланетяне
   б. зомби
   в. игрок
   г. персонаж-анимация

Если персонаж не перемещается (x==nx && y==ny), то выводится первый кадр анимации - персонаж стоит.
Если персонаж передвигается, то за время timePerMove его надо сместить на расстояние abs(nx-x)*cellSize || abs(ny-y)*cellSize по указанному направлению. Количество необходимых кадров также вычисляется, исходя из этого значения и частоты прорисовки кадров.
delta = abs(x-nx)*cellSize / timePerMove * drawInterval // значение смещения при перемещении персонажа
keyFrameValue  = timePerMove/drawInterval/animationFramesCount // значение, определяющее когда можно сменить кадр анимации -  framesCounter%keyFrameValue == 0